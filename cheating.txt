/*Implement N Queen's problem using Back Tracking.*/


#include<stdio.h>
#include<time.h>
#include<math.h>
#include<stdlib.h>
const int max=20;
clock_t  start, end, total;
int  place(int x[],int k)
{
int i;
for(i=0;i<k;i++)
	if (x[i]==x[k] || abs(x[i]-x[k])==abs(i-k))
	return 0;
return 1;

}
void display(int x[], int n)
{
	char chessb[max][max];
	int i,j;
	for(i=0;i<n;i++)
		for(j=0;j<n;j++)
			chessb[i][j]='x';
 	for(i=0;i<n;i++)
		chessb[i][x[i]]='q';

	for(i=0;i<n;i++)
	{
 		for(j=0;j<n;j++)
			printf("%c", chessb[i][j]);

		printf ("\n");
	}
printf ("\n");

}


void nqueens(int n)
{
	int x[max];
	int k;
	x[0]=-1;
	k=0;
	while(k>=0)
	{
		x[k]=x[k]+1;
		while(x[k]<n && !place(x,k))
			x[k]=x[k]+1;
		if(x[k]<n)
			if (k==n-1)
				display(x,n);
			else
			{
				k++; x[k]=-1;
			}
		else
		k--;
	}
}

void main()
{
int n;
printf("enter the no of queens\n");
scanf("%d", &n);
printf("the soln to %d queens problem is \n", n);
start=clock();
nqueens(n);
end=clock();
total = (end-start)/CLOCKS_PER_SEC;
printf("\ntime taken=%f\n",total);
}



ALGORITHM Backtrack(X[1...i])

//Gives a template of a generic backtracking algorithm 
//Input: X[1..i] specifies first i promising components of a solution
//Output: All the tuples representing the problem's solutions

if X[1...i] is a solution write X[1..i]
else //see Problem 9 in this section's exercises 
for each element x E Si+1 consistent with X[1..i] and the constraints do
X[i+1]<-x
Backtrack (X[1..i+1])
-----------------------------------------


#include<stdio.h>
void main()
{
int a[100], n, i, j, temp;
printf("Enter number of elements\n");
scanf("%d", &n);
printf("Enter %d Numbers:\n", n);
for(i = 0; i < n; i++)
scanf("%d", &a[i]);
for(i = 0 ; i < n - 1; i++)
{
for(j = 0 ; j < n-i-1; j++)
{
if(a[j] > a[j+1])
{
 temp=a[j];
 a[j]=a[j+1];
 a[j+1]=temp;
}
}
}

printf("Sorted Array:\n");
for(i = 0; i < n; i++)
 printf("%d\t", a[i]);

}

Algorithm Bubble sort(A[0..n-1])
  //sorts a given array by bubble sort
  //input: An array A[0..n-1] of orderable elements
  //output: array A[0..n-1] sorted in non decreasing order
   for i<-0 to n-2 do
   for j<-0 to n-2-i do
     if A[j+1]<A[j] swap A[j] and A[j+1]

------------------------------------------------------------------



ALGORITHM Floyd(W[1..n, 1..n])

Implements Floyd's algorithm for the all-pairs shortest-paths problem
 //Input: The weight matrix W of a graph with no negative-length cycle 
//Output: The distance matrix of the shortest path's lengths 
D←W //is not necessary if W can be overwritten
 for k←1 to n do 
for i←1 to n do 
for j← 1 to n do 
D[i, j] ← min{D[i, j], D[i, k]+D(k, j]}
return D


#include<stdio.h>
#include<time.h>
clock_t  start, end, total;
int min(int,int);
void floyds(int p[10][10],int n)
{
int i,j,k;
	for(k=1;k<=n;k++)
		for(i=1;i<=n;i++)
			for(j=1;j<=n;j++)
				if(i==j)
					p[i][j]=0;
				else
				p[i][j]=min(p[i][j],p[i][k]+p[k][j]);
}

int min(int a,int b)
{
if(a<b) return(a); else return(b);
}

void main()
{
	int p[10][10],w,n,e,u,v,i,j;
	printf("\n Enter the number of vertices:");
	scanf("%d",&n);
	printf("\n Enter the number of edges:\n");
	scanf("%d",&e);
	for(i=1;i<=n;i++)
		{
		for(j=1;j<=n;j++)
			p[i][j]=999;
		}
	for(i=1;i<=e;i++)
	{
		printf("\n Enter the end vertices of edge%d with its weight \n",i);
		scanf("%d%d%d",&u,&v,&w);
		p[u][v]=w;
	}
printf("\n Matrix of input data:\n");

for(i=1;i<=n;i++)
{
	for(j=1;j<=n;j++)
		printf("%d\t",p[i][j]);
		printf("\n");
}
start=clock();
floyds(p,n);
end=clock();
printf("\n Transitive closure:\n");
for(i=1;i<=n;i++)
{
	for(j=1;j<=n;j++)
		printf("%d\t",p[i][j]);
		printf("\n");
}
printf("\n The shortest paths are:\n");
for(i=1;i<=n;i++)
	for(j=1;j<=n;j++)
	{
		if(i!=j)
		printf("\n <%d,%d>=%d",i,j,p[i][j]);
	}
total = (end-start)/CLOCKS_PER_SEC;
printf("\ntime taken=%f\n",total);
}

-----------------------------------------------------------------

#include <stdio.h>
int fact(int);
void main()
{
int num,result;
printf("Enter a number: ");
scanf("%d", &num);
if (num < 0)
{
printf("Error!");
}
else
{
 result = fact(num);
 printf("The Factorial of %d is %d.\n", num, result);
}
}
int fact(int num)
{
if (num == 0 || num == 1)
{
return 1;
}
else
{
return(num * fact(num - 1));
}
}


ALGORITHM Factorial of a number(n) 
Step 1: Start
Step 2: Read number n
Step 3: If n==1 then return 1 
Step 4: else return n*factorial(n-1) 
Step 4: Stop


----------------------------------------------------------

1. Non recursive Factorial of a number

#include <stdio.h>
void main()
{
int n, i,fact = 1;
 printf("Enter an integer: ");
scanf("%d",&n);
if (n < 0)
printf("Error");
    else
{
for(i=1; i<=n; ++i)
{
fact *= i;
}
printf("Factorial of %d = ", n, fact);
}
}
 


ALGORITHM Factorial of a number (n)
Step 1: Start
Step 2: Declare variables n, factorial and i.
Step 3: Initialize variables factorial←1
i←1
Step 4: Read value of n
Step 5: Repeat the steps until i=n 5.1: factorial←factorial*i
5.2: i←i+1
Step 6: Display factorial Step 7: Stop
---------------------------------------------------------


#include <stdio.h>
int gcd(int a, int b)
{
if (b == 0)
return a;
return gcd(b, a % b);
}

void main()
{
int a ,b;
printf("Enter the value of a and b\n");
scanf("%d %d",&a,&b);
printf("GCD of %d and %d is %d ", a, b, gcd(a, b));
}

ALGORITHM euclids(m,n)                
                                                                                          function gcd(a, b)
if b = 0 return a;
else
return gcd(b, a mod b);
----------------------------------------------------------------------



#include <math.h>
#include <stdio.h>
#include<time.h>

void insertionSort(int arr[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
int main()
{
    int arr[20],n,i;
    clock_t  start, end, total;
    printf("enter array size\n");
    scanf("%d",&n);
    printf("enter array elements\n");
    for(i=0;i<n;i++)
    scanf("%d",&arr[i]);
    start = clock();
    insertionSort(arr, n);
    end = clock();
    total = (end-start)/CLOCKS_PER_SEC;
    printf("array after sorting is\n");
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
    printf("time taken=%f",total);
    return 0;
}



Algorithm Insertion sort(A[0..n-1])
  //sorts a given array by bubble sort
  //input: An array A[0..n-1] of n  orderable elements
  //output: array A[0..n-1] sorted in non decreasing order
for i<-1 to n-1 do
   v<-A[i]
   j<-i-1
   while j>=0 and A[j]>v do
   A[j+1]<-A[j]
   j<-j-1
   A[j+1]<-v

------------------------------------------------------------------------



#include<stdio.h>
int i,j,k,a,b,v,u,n,ne=1;
int min,mincost=0,cost[9][9],parent[9];
void main()
{
printf("\nEnter the number of vertices\n");
scanf("%d",&n);
printf("Enter the adjacency matrix::\n");
for (i=1;i<=n;i++)
for (j=1;j<=n;j++)
{
scanf("%d",&cost[i][j]);
if(cost[i][j]==0)
cost[i][j]=999;
}
printf("\nThe edges of spanning treeare:\n\n");
while(ne<n)
{
for (i=1,min=999;i<=n;i++)
for (j=1;j<=n;j++)
{
 if(cost[i][j]<min)
{
min=cost[i][j];
a=u=i; b=v=j;
}
}
while(parent[u])
u=parent[u];
while(parent[v])
v=parent[v];
if(u!=v)
{
printf("\n%d\tEdge(%d,%d)=%d",ne++,a,b,min);
mincost+=min;
parent[v]=u;
}
cost[a][b]=cost[b][a]=999;
}
printf("\n\tMiINCOST=%d\n",mincost);
}


ALGORITHM Kruskal(G) //Kruskal’s algorithm for constructing a minimum spanning tree
//Input: A weighted connected graph G = (V, E )
//Output: ET , the set of edges composing a minimum spanning tree of G
sort E in nondecreasing order of the edge weights w(ei 1 ) ≤ . . . ≤ w(ei| E| )
ET ←NULL;
ecounter ←0 //initialize the set of tree edges and its size
k←0 //initialize the number of processed edges
while ecounter < | V| − 1 do
k← k + 1
if ET 𝖴 { eik} is acyclic
ET← ET 𝖴 { eik};
ecounter ← ecounter + 1
return ET.
------------------------------------------------------------------------



3. Linear Search

#include<stdio.h>
void main()
{
int a[100], search, c, num;
printf("Enter the number of elements in array\n");
 scanf("%d",&num);
printf("Enter %d numbers\n", num);
 for ( c = 0 ; c < num ; c++ )
{
    printf("Enter the %d element : ",c+1);
    scanf("%d",&a[c]);
 }
printf("Enter the number to search\n");
scanf("%d",&search);
for ( c = 0 ; c < num ; c++ )
{
if ( a[c] == search )
{
printf("%d is present at location %d.\n", search, c+1);
break;
}
}
if ( c == num )
printf("%d is not present in array.\n", search);
}


ALGORITHM linear search/sequential search
 FOR i = 0 to array length - 1
IF X == array[i] THEN
 RETURN i
ENDIF 
ENDFOR 
RETURN -1


------------------------------------------------------------------



#include <stdio.h>
int main()
{
	int i, n,max,min,arr[20];
    printf("Enter total number of elements(1 to 100): ");
    scanf("%d", &n);
     printf("\n");
     for(i = 0; i < n; i++)
     {
	printf("Enter Number %d: ", i+1);
	scanf("%d", &arr[i]);
     }
        max=arr[0];
	min=arr[0];
	for(i = 1; i < n; i++)
	{
	     if(arr[i] > max)
                        max = arr[i];
                  else if (arr[i]<min)
                         min=arr[i];
	}
	printf("\n MAX element = %d\n MIN element=%d\n  ", max,min);
return 0;
}


ALGORITHM finding maximum and minimum element 
SET Max to array[0]
SET Min to array[0]
FOR i = 1 to array length - 1 
   IF array[i] > Max THEN    
       SET Max to array[i] 
   ELSE IF array[i] < Min THEN    
       SET Min to array[i]
END IF-ELSE
END FOR  
PRINT Max and Min element

------------------------------------------------------------------------



#include<stdio.h>
#include<time.h>
#define MAX 50
void mergeSort(int arr[],int low,int mid,int high);
void partition(int arr[],int low,int high);
double tc;
time_t start,end;
void main()
{
	int a[MAX],i,n;
	printf("Enter the total number of elements: ");
	scanf("%d",&n);
	printf("Enter the elements to be sorted:\n\n");
	for(i=0;i<n;i++)
	{
		printf("Enter the %d element:",i+1);
		scanf("%d",&a[i]);
		printf("\n");
	}
            start=clock();
	partition(a,0,n-1);
            end=clock();
	printf("After merge sorting elements are: ");
	for(i=0;i<n;i++)
	{
		printf("%d ",a[i]);
	}
            tc=difftime(end,start)/CLOCKS_PER_SEC;
	printf("time efficiency is %lf",tc);
}

void partition(int arr[],int low,int high)
{
	int mid;
	if(low<high)
	{
		mid=(low+high)/2;
		partition(arr,low,mid);
	partition(arr,mid+1,high);
		mergeSort(arr,low,mid,high);
	}
}

void mergeSort(int arr[],int low,int mid,int high)
{
	int i,m,k,l,temp[MAX];
	l=low; i=low; m=mid+1;

    while((l<=mid)&&(m<=high))
   {
		if(arr[l]<=arr[m])

                      {
			temp[i]=arr[l];
			l++;
		}

else
		{
			temp[i]=arr[m];
			m++;
		}
			i++;
	}
	if(l>mid)
	{
		for(k=m;k<=high;k++)
		{
			temp[i]=arr[k];
			i++;
		}
	}
	else
	{
		for(k=l;k<=mid;k++)
		{
			temp[i]=arr[k];
			i++;
		}
	}
	for(k=low;k<=high;k++)
	{
		arr[k]=temp[k];
	}
}


ALGORITHM Mergesort(A[0..n-1])

//Sorts array A[0..n-1] by recursive mergesort

//Input: An array A[0..n-1] of orderable elements
 //Output: Array A[0..n-1] sorted in nondecreasing order

if n>1

copy A[0..[n/2]-1] to B[0..[n/2]-1]
copy A[n/2]...n-1] to C[0..[n/2]-1]
Mergesort (B[0..[n/2]-1])
Mergesort (C[0..[n/2]-1])
Merge(B, C, A) //see below

ALGORITHM Merge( B[0..p - 1], C[0..q - 1], A[0..p + q - 1])
//Merges two sorted arrays into one sorted array
/Input: Arrays B[0..p - 1] and C[0..q - 1] both sorted
//Output: Sorted array A[0...p + q - 1] of the elements of B and C

i<-0; j<-0; k<-0

while i < p and j < q do
if B[i] <= C[j]
A[k]<-B[i]; i<-i + 1
else A[k]<-C[j]; i<-i + 1
k<-k+ 1
if i = p
copy C[j..q - 1] to A[k..p+q-1] 
else copy B[i..p-1]toA[k..p + q - 1]
-----------------------------------------------------------------------



#include<stdio.h>
int i, j, a, b, v, u,n, ne=1;
int min,mincost=0, cost[9][9], visited[9];
void main()
{
printf( "The no of vertices=\t");
scanf("%d",&n);
printf("Enter the adjacency matrix=\t");
for( i=1;i<=n;i++)
for( j=1;j<=n;j++)
{
scanf("%d",&cost[i][j]);
if(cost[i][j]==0)
cost[i][j]=999;
}
printf("The edges of spanning tree are \t");
visited[1]=1;
while(ne<n)
{
for(i=1,min=999;i<=n; i++)
{
for(j=1;j<=n;j++)
{
if(cost[i][j]<min)
{
if(visited[i]==0)
continue;
else
{
min=cost[i][j];
a=u=i;
b=v=j;
}
}
}
}
if(visited[v]==0)
{
printf("\n%d\t Edge \t(%d, %d)=%d\n",ne++, a, b, min);
mincost+=min;
visited[b]=1;
}
cost[a][b]=cost[b][a]=999;
}
printf("\n\t mincost=%d\n",mincost);
}



ALGORITHM Prim(G) //Prim’s algorithm for constructing a minimum spanning tree
//Input: A weighted connected graph G = _ V, E _
//Output: ET , the set of edges composing a minimum spanning tree of G
VT←{ v 0} //the set of tree vertices can be initialized with any vertex
ET←NULL
for i ←1 to | V| − 1 do
find a minimum-weight edge e* = (v*, u*) among all the edges (v, u)
such that v is in VT and u is in
V − VT VT← VT 𝖴 { u*}
ET← ET 𝖴 { e*}
return ET.
-----------------------------------------------------------

#include<stdio.h>
# include<time.h>
#define max 500
double tc;
time_t start,end;
void qsort(int [],int,int);
int partition(int [],int,int);
int main()
{
	int a[max],i,n;
	printf("Enter the total number of elements: ");
	scanf("%d",&n);
	printf("Enter the elements to be sorted:\n\n");
	for(i=0;i<n;i++)
	{
		printf("Enter the %d element:",i+1);
		scanf("%d",&a[i]);
		printf("\n");
	}

	printf("\nThe array elements before\n");
	for(i=0;i<n;i++)
		printf("%d\t",a[i]);
                start=clock();
	qsort(a,0,n-1);
                end=clock();
	printf("\nElements of the array after sorting are:\n");
	for(i=0;i<n;i++)
		printf("%d\t",a[i]);
               tc=difftime(end,start)/CLOCKS_PER_SEC;
	printf("time efficiency is %lf",tc);
}

void qsort(int a[],int low,int high)
{
	int j; if(low<high)
	{
		j=partition(a,low,high);
		qsort(a,low,j-1);
		qsort(a,j+1,high);
	}
}

int partition(int a[], int low,int high)
{
	int pivot,i,j,temp; pivot=a[low]; i=low+1;
	j=high;
	while(1)
	{
		while(pivot>a[i] && i<=high)
		i++;
		while(pivot<a[j])
		j--;
		if(i<j)
		{
			temp=a[i];
			a[i]=a[j];
			a[j]=temp;
		}
		else
		{
			temp=a[j];
			a[j]=a[low];
			a[low]=temp;
		 return j;
		}
               }
}


ALGORITHM Quicksort(All..r]) 
//Sorts a subarray by quicksort
//Input: Subarray of array A[0..n-1], defined by its left and right
indices L and r
//Output: Subarray A[L..r] sorted in nondecreasing order
if L<r
    s-Partition (A[L...r])// s is a split position
    Quicksor(A[L..s-1]) 
    Quicksort(A[s+1..r])
ALGORITHM Partition(A[L..r]
//Partitions a subarray by Hoare's algorithm, using the first element
// as a pivot
//Input: Subarray of array A[0..n-1],defined by its left and right
// indicesL and r (L<r)
//Output: Partition of A[L..r], with the split position returned as
// this function's value
P<-A[L]
i<-L; j<-r+1
repeat
    repeat i<-i + 1 until A[i]>= p 
    repeat j<-j-1 until A[j]<=p
    swap(A[i],A[j])
until i>=j
swap(A[i], A[j]) //undo last swap when i>=j
swap(A[L], A[j])
return j
--------------------------------------------------------------------------


1. Selection sort
Algorithm SelectionSort(A[0..n-1])
//The algorithm sorts a given array by selection sort
//Input: An array A[0..n-1] of orderable elements
//Output: Array A[0..n-1] sorted in ascending order
for i  0 to n – 2 do
	min  i
	for j  i + 1 to n – 1 do
		if A[j] < A[min] 	
		         min  j
	swap A[i] and A[min]
2. Element uniqueness Problem
ALGORITHM

Unique Elements (A[0..n-1])
//Determines whether all the elements in a given array are distinct
//Input: An array A[0..n-1]
 //Output: Returns "true" if all the elements in A are distinct
 //and "false" otherwise
for i<-0 to n-2 do
for j<-1 to n-1 do.
if A[i]= A[j] return false
else
return true

3.Container loading Problem
Algorithm ContainerLoading(c, capacity, numberofContainers, x) 
// set x[i] = 1 if and only if container c[i], i ≥ 1 is loaded. 
{ 
// sort into increasing order of weights. 
	Sort(C, numberofContainers); 
	n = numberofContainers; 
	for i = 1 to n do 
		x[i] = 0; 
	i = 1; 
	while ((i <= n) && (c[i].weight <= capacity)) 
	{ 
		x[c[i].id] = 1; 
		capacity = capacity – c[i].weight; 
		i++; 
	} 
} 

4.Binary search
If K = A[m], stop (successful search);  otherwise, continue
searching by the same method in A[0..m-1] if K < A[m]
and in A[m+1..n-1] if K > A[m]

l  0;   r  n-1
while l <= r do
	m <- [(l+r)/2]
     if  K = A[m]  return m
     else if K < A[m]  r <- m-1
     else l <- m+1
return -1

5.Fibonacci numbers (recursive)
Fib(n)
{
Solution	if(n==0 || n==1)
		return n;
	else
	{
		a=Fib(n-1);
		b=Fib(n-2);
		c=a+b;
		return(c);
	} }
fibonacci number(dynamic)
Fib(n)
{
	if(n==0||n==1)
		return n;
	else
              {
	if(c[n-1]==NULL)
		c[n-1]=fib(n-1);
	if(c[n-2]==NULL)
		c[n-2]=fib(n-2);
      C[n]=c[n-1] + c[n-2];	
     return(c[n]);		
        }
}


6. binomial coefficient(recursive)
 bcoef(n, k)
{
	if( k = 0 or  k = n )
		return 1; 
	else
		return (bcoef( n-1, k-1 ) + bcoef( n-1, k ));
}

 binomial coefficient(dynamic)
Bcoef_dp(n, k){
 for i ← 0 to n{
	for j ← 0 to min( i ,k ){
	           if (j=0 or j=i)
                	 C[i][j] = 1
          	else
			C[i][j] = C[i-1][j-1] + C[i-1][j] }
     }
return C[n][k]
}


7.ALGORITHM Warshall(A[1..n. 1..n])

//Implements Warshall's algorithm for computing the transitive closure 
//Input: The adjacency matrix A of a digraph with n vertices
 //Output: The transitive closure of the digraph
R^(0)<- A
for k<-1 to n do
for i<-1 to n do
for j<-1 to n do
R^(k)[i,j]<-R^(k-1)[i,j] or R^(k-1)[i,k] and R^(k-1)[k, j])
return R^(n)


8. Dijkstra
Dijkstra(G,w,s)//G is graph,w is weights of the edges,s is root
{
        1.S=Ø//Set of vertices taken
        2.For each v ϵ V:
          3.Dist[v]=∞//initialize distance
        4.Dist[s]=0//initialize source vertex
        5.Q=V //Q is a minimum priority queue
        6.While Q!= Ø:
            {
          7.u = min(Q) by Distance value
          8.Q=Q-u
          9.S = S U {u}
          10.For each v ϵ Adj(u):
          11. If v ϵ Q and   Dist[v] > Dist[u] +w(u,v)
          12. Dist[v]=Dist[u] + w(u,v)
}
13. return(S)


9. N-Queens problem
 Place(k,i)
 {
  for j<-1 to k-1
  do if(x[j]=i)
  or (abs x[j]-i)=(abs(j-k))
 then return false;
  return true;
}
N-Queens(k,n)
{
 for i<-1 to n
  do if place(k,i) then
 {
  x[k]<-i;
  if(k==n) then
   write (x[1...n]);
 else
 N - Queens(k+1,n);
}
}

10.  Sum of Subset Algorithm
Input :The given set and subset, size of set and subset, a total of the subset, number of elements in the subset and the given sum.
Output : All possible subsets whose sum is the same as the given sum.
Algorithm
	subsetSum(set, subset, n, subSize, total, node, sum)
	Begin
		if total = sum, then
			display the subset
			//go for finding next subset
	subsetSum(set, subset, , subSize-1, total-set[node], node+1, sum)
	return
	else
		for all element i in the set, do
		subset[subSize] := set[i]
		subSetSum(set, subset, n, subSize+1, total+set[i], i+1, sum)
		done
	End



------------------------------------------------------------------------------


#include <stdio.h>
#include <stdlib.h>

void hanoi(int n, char rodFrom, char rodMiddle, char rodTo)
{
    if(n==1)
   {
        printf("Disk 1 moved from %c to %c \n",rodFrom,rodTo);
        return;
    }
    hanoi(n-1,rodFrom,rodTo,rodMiddle);
    printf("Disk %d moved from %c to %c \n",n,rodFrom,rodTo);
    hanoi(n-1,rodMiddle,rodFrom,rodTo);

}
 void main()
{
    int n;
    printf("enter total number of disc\n");
    scanf("%d",&n);
    hanoi(n, 'A', 'B', 'C');
}


ALGORITHM Towerofhanoi START
Procedure Hanoi(disk, source, dest, aux)
IF disk == 1, THEN
move disk from source to dest ELSE
Hanoi(disk - 1, source, aux, dest) // Step 1 move disk from source to dest	// Step 2 Hanoi(disk - 1, aux, dest, source) // Step 3
END IF
END Procedure STOP

---------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

void hanoi(int n, char rodFrom, char rodMiddle, char rodTo)
{
    if(n==1)
   {
        printf("Disk 1 moved from %c to %c \n",rodFrom,rodTo);
        return;
    }
    hanoi(n-1,rodFrom,rodTo,rodMiddle);
    printf("Disk %d moved from %c to %c \n",n,rodFrom,rodTo);
    hanoi(n-1,rodMiddle,rodFrom,rodTo);

}
int gcd(int a, int b)
{
if (b == 0)
return a;
return gcd(b, a % b);
}
 void main()
{
    int n;
    int num;
    int a,b;
    scanf("%d",&num);
    if(num%2==0)
    {printf("enter total number of disc\n");
    scanf("%d",&n);
    hanoi(n, 'A', 'B', 'C');
    }
    else
    {
        printf("Enter the value of a and b\n");
        scanf("%d %d",&a,&b);
       printf("GCD of %d and %d is %d ", a, b, gcd(a, b)); 
    }
}



----------------------
-----------------------------------



#include <stdio.h>
int fact(int);
int gcd(int a, int b)
{
if (b == 0)
return a;
return gcd(b, a % b);
}
void main()
{
int a,b,result1,result2;
printf("Enter a number: ");
scanf("%d%d", &a,&b);
if (a < 0 ||b<0)
{
printf("Error!");
}
else
{
 result1 = fact(a);
 result2 = fact(b);
 printf("The Factorial of %d and %d is %d and %d.\n", a,b, result1,result2);
 printf("GCD of %d and %d is %d ", result1, result2, gcd(result1, result2));
}
}
int fact(int num)
{
if (num == 0 || num == 1)
{
return 1;
}
else
{
return(num * fact(num - 1));
}
}